<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="utf-8" />
        <link rel="icon" href="./favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta name="description" content="osindex,site" />
        <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
        <link rel="manifest" href="./manifest.json" />
        <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
        <title>my-desktop</title>
        <link rel="stylesheet" type="text/css" href="/assets/styles/app.css">
        <link rel="stylesheet" type="text/css" href="/assets/styles/index.css">
        <link rel="stylesheet" type="text/css" href="/assets/styles/apps.css">
        <link rel="stylesheet" type="text/css" href="/assets/styles/footer.css">
        <script type="text/javascript" src="https://at.alicdn.com/t/font_1901382_1ae31dx9es1.js"></script>
    </head>

    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="app">
            <div class="App" v-cstyle style="background: url(/assets/image/default.jpg) center/cover no-repeat;" :class="[theme]">
                <v-mask v-model="overMask"> </v-mask>
                <header class="AppFinder" :style="{opacity: overMask?'0':'1'}">
                    <div class="FinderLeft">
                        <div><svg class="icon-font" aria-hidden="true" style="font-size: 22px;">
                                <use xlink:href="#icon-osi"></use>
                            </svg></div>
                        <div class="pointer">
                            <span class="text " v-cloak>{{myName}}</span>
                            <ul class="menu">
                                <li>自定义标题</li>
                                <div class="line"></div>
                                <li>你好</li>
                                <div class="line"></div>
                                <li>感谢来到这里的你</li>
                            </ul>
                        </div>
                        <div class="pointer">文件</div>
                        <div class="pointer">编辑</div>
                        <div class="pointer">显示</div>
                        <div class="pointer">前往</div>
                        <div class="pointer">窗口</div>
                        <div class="pointer" @click="showHelp">帮助</div>
                    </div>
                    <div class="FinderRight">
                        <div v-cloak>{{now}}</div><a :href="github"><svg class="icon-font" aria-hidden="true" style="font-size: 22px;">
                                <use xlink:href="#icon-ren"></use>
                            </svg></a>
                    </div>
                </header>
                <div id="main-view" v-if="loaded" v-cloak>
                    <vue-drag-resize
                    v-for="(dom, index) in doms"
                    :key="index"
                    v-bind="dom"
                    @resizing="resize"
                    @dragging="resize"
                    @close="removeDom(index)"
                    :ref="dom.key || null"
                    >
                        <iframe v-if="dom.type === 'url'" :src="dom.url" style="width: 100%;height: 100%;border: 0;">
                        </iframe>
                        <component v-if="dom.component" v-bind="dom.bind" :is="dom.component">
                            <div v-html="dom.html"></div>
                        </component>
                        <div v-else v-html="dom.html"></div>
                    </vue-drag-resize>

                    <modal name="vmd">
                        2333
                    </modal>
                </div>
                <footer class="left" id="AppFooter">
                    <div id="Docker" class="left" style="width: 70px; margin-left: 0px;">
                        <div class="DockItem left Finder"></div>
                        <div class="DockItem left Launchpad" @click="openApps"></div>
                        <!-- openApp('game-puzzle', {bind: {src: 'http://localhost:10241/assets/image/light.jpg'}}) -->
                        <div class="DockItem left pointer PrefApp" @click="iframe()"></div>
                        <div class="DockItem left pointer Chrome" @click="browser()"></div>
                        <div class="DockItem left Terminal"></div>
                        <div class="DockItem left pointer Calculator"></div>
                        <div class="DockItem left pointer Drawing"></div>
                    </div>
                </footer>
            </div>
        </div>
    </body>
    <!-- <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    <script src="https://cdn.jsdelivr.net/npm/http-vue-loader"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs/locale/zh-cn.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue-js-modal"></script> -->

    <script src="https://unpkg.com/vue"></script>
    <script src="https://unpkg.com/http-vue-loader"></script>
    <script src="https://unpkg.com/dayjs"></script>
    <script src="https://unpkg.com/dayjs/locale/zh-cn.js"></script>
    <script src="https://unpkg.com/vue-js-modal"></script>
    <script src="/assets/js/anime.js"></script>
    <script type="text/javascript">
    dayjs.locale('zh-cn')
    Vue.use(window["vue-js-modal"].default)
    // Vue.use(window["vue-js-modal"].default, { dialog: true })
    new Vue({
        el: '#app',
        components: {
            'v-modal': httpVueLoader('/assets/components/modal/index.vue'),
            'vue-drag-resize': httpVueLoader('/assets/components/drag/index.vue'),
            'osi-svg': httpVueLoader('/assets/components/svg/osi.vue'),
            'v-mask': httpVueLoader('/assets/components/mask/index.vue'),
            'game-puzzle': httpVueLoader('/assets/components/games/puzzle.vue'),
            'anchored-heading': {
              render: function (createElement) {
                return createElement(
                  'h' + this.level,   // 标签名称
                  this.$slots.default // 子节点数组
                )
              },
              props: {
                level: {
                  type: Number,
                  required: true
                }
              }
            }
        },
        data() {
            return {
                myName: 'osindex',
                github: 'https://github.com/osindex',
                loaded: false,
                overMask: false,
                theme: 'light',
                animeTarget: {},
                // tl - Top left
                // tm - Top middle
                // tr - Top right
                // mr - Middle right
                // br - Bottom right
                // bm - Bottom middle
                // bl - Bottom left
                // ml - Middle left
                body: {
                    width: 100,
                    height: 100,
                    top: 100,
                    left: 100
                },
                currentDate: dayjs(),
                doms: [],
                iframeActive: false,
                iframeUrl: null,
                isBrowser: null,
                'game-puzzle': false
            }
        },
        methods: {
            loadScript(src) {
                let scriptEle = document.createElement('script')
                scriptEle.src = src
                document.body.appendChild(scriptEle)
                // scriptEle.onload = () => {
                //  this.load = true
                // }
                return scriptEle
            },
            resize(newRect) {
                this.body.width = newRect.width;
                this.body.height = newRect.height;
                this.body.top = newRect.top;
                this.body.left = newRect.left;
            },
            animeEx() {
                console.log('Exxx')
                anime({
                  targets: ['.blue', '.green'],
                  translateX: '13rem',
                  easing: 'easeOutCirc',
                  rotate: 180,
                  borderRadius: 8,
                  duration: 2000,
                  loop: true
                });
            },
            iframe(url = "http://www.baidu.com/") {
                this.iframeUrl = url
                this.iframeActive = true
            },
            browser(url = "http://www.baidu.com/") {
                // 外部浏览器
                if (!this.isBrowser) {
                    this.isBrowser = window.open(
                        url,
                        "",
                        "width=1000,height=600,left=500,top=300,menubar=no,toolbar=no,status=no,scrollbars=yes"
                      )
                } else {
                  this.isBrowser.close()
                  this.isBrowser = null
                }
            },
            removeDom(index) {
                this.doms.splice(index, 1)
            },
            shake(el) {
                anime({
                    targets: el,
                    scale: 1,
                    rotate: [
                        {
                            value: -5,
                            duration: 50,
                            easing: 'easeInOutBounce'
                        },
                        {
                            value: 5,
                            duration: 50,
                            easing: 'easeInOutBounce'
                        },
                        {
                            value: 0,
                            duration: 25,
                            easing: 'easeInOutBounce'
                        }
                    ],
                    // loop: 2, //间隔时间太长 
                    // loopComplete: function(anim) {
                    //     console.log(anim)
                    //     // anime.remove(el) 移除无效
                    // }
                });
            },
            showHelp() {
                const e = this.doms.find(e=>e.key === 'help')
                if(e){
                    this.shake(this.$refs[e.key][0].$el)
                }else{
                    this.doms.push({key:'help', padding: 1, component:'osi-svg',html:`<p>YoungFan</p><p>copyright@2020</p>`,w: 600, h: 400})
                    // this.doms.push({key:'help',padding: 1,html:'<h2>内容呢？</h2><p>一段话</p>'})
                }
            },
            openApp(name, exts = {}) {
                // {key:'game-puzzle', padding: 1, component:'game-puzzle',w: 600, h: 400,bind: {src: 'http://localhost:10241/assets/image/light.jpg'} }
                if (this[name]) {
                    this.doms.push({key: name,w: 600, h: 400, padding: 1, ...exts })
                }
            },
            openApps() {
                this.overMask = true
                console.log(this.overMask)
                // const e = this.doms.find(e=>e.key === 'apps')
                // if(e){
                //     this.shake(this.$refs[e.key][0].$el)
                // }else{
                //     this.doms.push({key:'apps', padding: 1, component:'osi-svg',html:`<p>YoungFan</p><p>copyright@2020</p>`,w: 600, h: 400})
                //     // this.doms.push({key:'help',padding: 1,html:'<h2>内容呢？</h2><p>一段话</p>'})
                // }
            },
            beforeClose(event) {
                console.log(event.params);
            }
        },
        computed: {
            now() {
                return this.currentDate.format('M月D日 ddd HH:mm')
            }
        },
        directives: {
            // v-cloak 也需要vue 加载完 使用[css]和指令隐藏特性即可
            cstyle: {
                inserted: (el) => {
                    el.removeAttribute('style')
                }
            }
        },
        created() {
            const hour = (new Date()).getHours()
            this.theme = hour > 7 && hour < 18 ? 'light' : 'dark'
        },
        mounted() {
            this.loaded = true
            // this.$refs['vmd'].show()
            // this.$nextTick(()=>{
            //     this.$modal.show('vmd', { draggable: true, foo: 'bar' })
            //     // this.$refs['vmd'].show()
            // })
            // this.$modal.show('dialog', {
            //   title: 'Alert!',
            //   text: 'You are too awesome',
            //   buttons: [
            //     {
            //       title: 'Deal with it',
            //       handler: () => { alert('Woot!') }
            //     },
            //     {
            //       title: '',       // Button title
            //       default: true,    // Will be triggered by default if 'Enter' pressed.
            //       handler: () => {} // Button click handler
            //     },
            //     {
            //       title: 'Close'
            //     }
            //  ]
            // })
            window.setInterval(() => {
              this.currentDate = this.currentDate.add(1, 's')
            }, 1000)
            const puzzle = this.loadScript('https://cdn.jsdelivr.net/npm/vue-8-puzzle') // 延迟加载
            // const puzzle = this.loadScript('https://unpkg.com/vue-8-puzzle') // 延迟加载
            puzzle.onload = () => {
                 this['game-puzzle'] = true
            }
        }
    })
    </script>

</html>